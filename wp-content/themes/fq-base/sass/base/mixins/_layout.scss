/* -------------------------------------------------------------------------------------------
# Mixins or extends layout and grid elements
---------------------------------------------------------------------------------------------- */

// Set basic side padding on content elements
@mixin side-pad( $pad: $base-side-padding ) {
	padding-left: $pad;
	padding-right: $pad;
}

// Standard top and botton padding for container that is basic page content
@mixin vert-pad( $pad-top: $base-vert-padding, $pad-bottom: $base-vert-padding ) {
	padding-top: $pad-top;
	padding-bottom: $pad-bottom;
}

// Our basic container styles (uses padding and widths defined in variables)
@mixin contain-it( $max: $standard-width, $pad: $base-side-padding ) {
	max-width: $max;
	margin: 0 auto;
	width: 100%;
	@include side-pad( $pad );
}

// Force full browser-width even if an item is inside another container that is narrower.
@mixin align-full() {
	width: 100vw;
	max-width: 100vw;
	margin-left: calc( 50% - 50vw );
	margin-right: calc( 50% - 50vw );
}

// Force wide alignment if an item is inside another container that is narrower. The following will create a dynamic "wide" max-width that expands half the distance between the regular max-width set on its parent container and full width.
@mixin align-wide() {
	width: auto;
	margin-left: calc(25% - 25vw);
	margin-right: calc(25% - 25vw);
}

// A more fixed style of "wide" alignment, has a set max width. This will jibe better with elements that are using "contain-it"
// @mixin align-wide( $max: $wide, $standard: $standard-width ) {
// 	width: 100vw;
// 	margin-left: ( $standard - $max ) / 2;
// 	margin-right: ( $standard - $max ) / 2;
// 	max-width: $max;
// }
